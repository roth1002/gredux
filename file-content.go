package main

const dispatcherFileContent string = "" +
	`var Dispatcher = require('flux').Dispatcher;
module.exports = new Dispatcher();`

const appJSFileContent string = "" +
	`import React From 'react';

class App extends React.Component {
  render(){
    return (
      <div>
        <h1>A Demo Page Generated By Redux Generator</h1>
        <p>Start to develop your own app now !</p>
      </div>
    );
  }
};

export default = App;`

const mainJSFileContent string = "" +
	`import React from 'react';
import Root from './app/containers/Root';

// import './stylus/styles.styl';

React.render( <Root />, document.querySelector('#root') );
`

const webpackConfigFileContent string = "" +
	`var path = require('path');
var webpack = require('webpack');

module.exports = {
  devtool: 'eval',
  entry: [
    'webpack-dev-server/client?http://localhost:3000',
    'webpack/hot/only-dev-server',
    './index'
  ],
  output: {
    path: path.join(__dirname, 'dist'),
    filename: 'bundle.js',
    publicPath: '/static/'
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoErrorsPlugin()
  ],
  resolve: {
  //  alias: {
  //    'redux': path.join(__dirname, '..', '..', 'src')
  //  },
    extensions: ['', '.js', '.styl']
  },
  module: {
    loaders: [{
      test: /\.js$/,
      loaders: ['react-hot', 'babel'],
      exclude: /node_modules/,
      include: __dirname
    }, {
      test: /\.js$/,
      loaders: ['babel'],
      include: path.join(__dirname, '..', '..', 'src')
    }, {
      test: /\.css?$/,
      loaders: ['style', 'raw'],
      include: __dirname
    }, {
      test: /\.styl$/,
      loader: 'style!css!cssnext!stylus'
    }]
  }
};
`

const indexHTMLFileContent string = "" +
	`<!DOCTYPE html>
<html>

<head>
  <meta name='viewport' content='width=device-width,initial-scale=1.0'>
  <title>Index</title>
</head>

<body>
  <div id="root">
  </div>
  <script src="/static/bundle.js"></script>
</body>

</html>
`

func packageJSONFileContent(appName string, authorName string) string {
	fileContent := "" +
		`{
  "name": "` + appName + `",
  "version": "0.0.0",
  "description": "qnap nas file poc",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "start": "node server.js",
    "test": "mocha --recursive --compilers js:babel/register",
    "test:watch": "npm test -- --watch"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/purepennons/Q2P2P.git"
  },
  "keywords": [
    "react",
    "reactjs",
    "hot",
    "reload",
    "webpack",
    "flux",
    "p2p"
  ],
  "author": "` + authorName + `",
  "dependencies": {
    "normalize.css": "^3.0.3",
    "react": "^0.13.3",
    "react-redux": "^0.9.0",
    "react-router": "^0.13.3",
    "redux": "^1.0.1",
    "suitcss-utils-display": "^0.4.2"
  },
  "devDependencies": {
    "babel-core": "^5.8.22",
    "babel-loader": "^5.3.2",
    "css-loader": "^0.16.0",
    "cssnext-loader": "^1.0.1",
    "expect": "^1.9.0",
    "jsdom": "^5.6.1",
    "mocha": "^2.2.5",
    "mocha-jsdom": "^1.0.0",
    "postcss-import": "^6.2.0",
    "postcss-loader": "^0.6.0",
    "react-hot-loader": "^1.2.8",
    "style-loader": "^0.12.3",
    "stylus-loader": "^1.2.1",
    "webpack": "^1.11.0",
    "webpack-dev-server": "^1.10.1"
  }
}
`

	return fileContent
}

const serverJsFileContent string = "" +
	`var webpack = require('webpack');
var WebpackDevServer = require('webpack-dev-server');
var config = require('./webpack.config');

new WebpackDevServer(webpack(config), {
  publicPath: config.output.publicPath,
  hot: true,
  historyApiFallback: true,
  stats: {
    colors: true
  }
}).listen(3000, 'localhost', function (err) {
  if (err) {
    console.log(err);
  }

  console.log('Listening at localhost:3000');
});
`

const containerRootContent string = "" +
	`import React, { Component } from 'react';
import App from './App';
import { createStore, combineReducers } from 'redux';
import { Provider } from 'react-redux';
import * as reducers from '../reducers';

const reducer = combineReducers(reducers);
const store = createStore(reducer);

export default class Root extends Component {
  render() {
    return (
      <Provider store={store}>
        {() => <App />}
      </Provider>
    );
  }
}
`

const containerAppContent string = "" +
	`import React, { Component } from 'react';
// import { bindActionCreators } from 'redux';
// import { connect } from 'react-redux';

class App extends Component {
  render() {
    // const { todos, dispatch } = this.props;
    // const actions = bindActionCreators(TodoActions, dispatch);

    return (
      <div>
        Index
      </div>
    );
  }
}

// export default connect()(App);
export default App;
`

const reducerIndexContent string = "" +
	`import { combineReducers } from 'redux';
import todos from './todos';

const rootReducer = combineReducers({
  todos
});

export default rootReducer;
`

const reducerTodosContent string = "" +
	`import { combineReducers } from 'redux';

const initialState = [];


export default function todos(state = initialState, action) {
  switch (action.type) {
    default:
      return state;
  }
}

`
